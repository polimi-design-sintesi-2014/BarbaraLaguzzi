
// * KEYS
//* 1-3                  : create a new collage (layer specific)
//* s                    : save png
//*

import java.util.Calendar;

PImage[] images;
String[] imageNames;
int imageCount;

CollageItem[] layer1Items, layer2Items, layer3Items;


void setup() {
  size(1024, 768);
  imageMode(CENTER);
  background(255);

  File dir = new File(sketchPath, "/Users/Etto/Desktop/Collage_prova");

  if (dir.isDirectory()) {
    String[] contents = dir.list();
    images = new PImage[contents.length]; 
    imageNames = new String[contents.length]; 
    for (int i = 0; i < contents.length; i++) {
      // skip hidden files and folders starting with a dot, load .png files only
      if (contents[i].charAt(0) == '.') continue;
      else if (contents[i].toLowerCase().endsWith(".png")) {
        File childFile = new File(dir, contents[i]);        
        images[imageCount] = loadImage(childFile.getPath());
        imageNames[imageCount] = childFile.getName();
        println(imageCount+" "+contents[i]+"  "+childFile.getPath());
        imageCount++;
      }
    }
  }

  layer1Items = generateCollageItems("layer1", 100, 0, height/2, TWO_PI, height, 0.1, 0.5, 0, 0);
  layer2Items = generateCollageItems("layer2", 150, 0, height/2, TWO_PI, height, 0.1, 0.3, -PI/6, PI/6);
  layer3Items = generateCollageItems("layer3", 110, 0, height/2, TWO_PI, height, 0.1, 0.2, 0, 0);

  drawCollageItems(layer1Items);
  drawCollageItems(layer2Items);
  drawCollageItems(layer3Items);
}

void draw() {
}

void keyPressed() {
  if (key == 's' || key == 'S') saveFrame(timestamp()+"_####.png");

  if (key == '1') layer1Items = generateCollageItems("layer1", (int)random(50, 200), 0, height/2, PI*5, height, 0.1, 0.5, 0, 0);
  if (key == '2') layer2Items = generateCollageItems("layer2", (int)random(25, 300), 0, height*0.15, PI*5, 150, 0.1, random(0.3, 0.8), -PI/6, PI/6);
  if (key == '3') layer3Items = generateCollageItems("layer3", (int)random(50, 300), 0, height*0.66, PI*5, height*0.66, 0.1, random(0.2, 0.5), -0.05, 0.05);

  background(255);
  drawCollageItems(layer1Items);
  drawCollageItems(layer2Items);
  drawCollageItems(layer3Items);
}

class CollageItem {
  float a = 0, l = 0;
  float rotation = 0;
  float scaling = 1;
  int indexToImage = -1;
}

CollageItem[] generateCollageItems(String thePrefix, int theCount, 
float theAngle, float theLength, float theRangeA, float theRangeL, 
float theScaleStart, float theScaleEnd, float theRotationStart, float theRotationEnd) {
  // collect all images with the specified prefix
  int[] indexes = new int[0];
  for (int i = 0; i < imageNames.length; i++) {
    if (imageNames[i] != null) {
      if (imageNames[i].startsWith(thePrefix)) {
        indexes = append(indexes, i);
      }
    }
  }

  CollageItem[] items = new CollageItem[theCount];
  for (int i = 0; i < items.length; i++) {
    items[i] = new CollageItem();
    items[i].indexToImage = indexes[i%indexes.length];
    items[i].a = theAngle + random(-theRangeA/2, theRangeA/2);
    items[i].l = theLength + random(-theRangeL/2, theRangeL/2);
    items[i].scaling = random(theScaleStart, theScaleEnd);
    items[i].rotation = items[i].a + HALF_PI + random(theRotationStart, theRotationEnd);
  }
  return items;
}

void drawCollageItems(CollageItem[] theItems) {
  for (int i = 0; i < theItems.length; i++) {
    pushMatrix();
    float newX  = width/2 + cos(theItems[i].a) * theItems[i].l;
    float newY  = height/2 + sin(theItems[i].a) * theItems[i].l; 
    translate(newX, newY);
    rotate(theItems[i].rotation);
    scale(theItems[i].scaling);
    image(images[theItems[i].indexToImage], 0, 0);
    popMatrix();
  }
}

String timestamp() {
  Calendar now = Calendar.getInstance();
  return String.format("%1$ty%1$tm%1$td_%1$tH%1$tM%1$tS", now);
}
